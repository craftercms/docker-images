/*
 * Copyright (C) 2007-2021 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.apache.commons.io.FilenameUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.6'
    }
}

plugins {
    id "de.undercouch.download" version "4.0.4"
}

project.version = project.hasProperty("tag") ? project.property("tag") : "4.0.0-SNAPSHOT" // craftercms version flag

ext {
    imagesDir = "${projectDir}/images"
    imagesBuildDir = "${buildDir}/images"
    tempDir = "${buildDir}/temp"

    libsslUrl = "https://downloads.craftercms.org/ent/lib/libssl1.0.0.tar.gz"

    if (project.hasProperty("authoringBundle")) {
        if (project.property("authoringBundle") ==~ /^https?:\/\/.+$/) {
            authoringBundleUrl = project.property("authoringBundle")
            authoringBundleFile = "${tempDir}/" + FilenameUtils.getName(authoringBundleUrl)
            authoringBundleRoot = "${tempDir}/" + FilenameUtils.getBaseName(authoringBundleUrl) + "/crafter-authoring"
        } else {
            authoringBundleUrl = ""
            authoringBundleFile = project.property("authoringBundle")
            authoringBundleRoot = "${tempDir}/" + FilenameUtils.getBaseName(authoringBundleFile) + "/crafter-authoring"
        }
    } else {
        authoringBundleUrl = "https://downloads.craftercms.org/${project.version}/social/crafter-cms-authoring-${project.version}.tar.gz"
        authoringBundleFile = "${tempDir}/" + FilenameUtils.getName(authoringBundleUrl)
        authoringBundleRoot = "${tempDir}/" + FilenameUtils.getBaseName(authoringBundleUrl) + "/crafter-authoring"
    }

    if (project.hasProperty("deliveryBundle")) {
        if (project.property("deliveryBundle") ==~ /^https?:\/\/.+$/) {
            deliveryBundleUrl = project.property("deliveryBundle")
            deliveryBundleFile = "${tempDir}/" + FilenameUtils.getName(deliveryBundleUrl)
            deliveryBundleRoot = "${tempDir}/" + FilenameUtils.getBaseName(deliveryBundleUrl) + "/crafter-delivery"
        } else {
            deliveryBundleUrl = ""
            deliveryBundleFile = project.property("deliveryBundle")
            deliveryBundleRoot = "${tempDir}/" + FilenameUtils.getBaseName(deliveryBundleFile) + "/crafter-delivery"
        }
    } else {
        deliveryBundleUrl = "https://downloads.craftercms.org/${project.version}/social/crafter-cms-delivery-${project.version}.tar.gz"
        deliveryBundleFile = "${tempDir}/" + FilenameUtils.getName(deliveryBundleUrl)
        deliveryBundleRoot = "${tempDir}/" + FilenameUtils.getBaseName(deliveryBundleUrl) + "/crafter-delivery"
    }

    authoringBuildTarget = 'main'

    if (project.hasProperty("enterprise")) {
        authoringBuildTarget = 'enterprise'
    }

    defaultTomcatBinExcludes = [
        "migration",
        "upgrade",
        "crafter-deployer",
        "elasticsearch",
        "solr",
        "dbms",
        "apache-tomcat/work/**",
        "apache-tomcat/temp/**",
        "apache-tomcat/webapps/crafter-search*",
        "apache-tomcat/webapps/crafter-social*",
        "apache-tomcat/webapps/crafter-profile*",
        "apache-tomcat/webapps/ROOT",
        "apache-tomcat/webapps/studio",
        "**/*.pid"
    ]

    tomcatWithCrafterSearchBinExcludes = [
        "migration",
        "upgrade",
        "crafter-deployer",
        "elasticsearch",
        "solr",
        "dbms",
        "apache-tomcat/work/**",
        "apache-tomcat/temp/**",
        "apache-tomcat/webapps/crafter-search",
        "apache-tomcat/webapps/crafter-social*",
        "apache-tomcat/webapps/crafter-profile*",
        "apache-tomcat/webapps/ROOT",
        "apache-tomcat/webapps/studio",
        "**/*.pid"
    ]
}

task downloadLibssl(type: Download) {
    src libsslUrl
    overwrite false
    dest "${tempDir}/libssl1.0.0.tar.gz"
}

task downloadAuthoringBundle(type: Download) {
    src authoringBundleUrl
    overwrite false
    dest authoringBundleFile
}

task downloadDeliveryBundle(type: Download) {
    src deliveryBundleUrl
    overwrite false
    dest deliveryBundleFile
}

task expandLibssl(type: Copy) {
    mustRunAfter downloadLibssl
    from tarTree("${tempDir}/libssl1.0.0.tar.gz")
    into "${tempDir}/libssl1.0.0"
}

task expandAuthoringBundle(type: Copy) {
    mustRunAfter downloadAuthoringBundle
    from tarTree(authoringBundleFile)
    into "${tempDir}/" + FilenameUtils.getBaseName(authoringBundleFile)
}

task expandDeliveryBundle(type: Copy) {
    mustRunAfter downloadDeliveryBundle
    from tarTree(deliveryBundleFile)
    into "${tempDir}/" + FilenameUtils.getBaseName(deliveryBundleFile)
}

task prepareAuthoringBundle() {
    if (project.hasProperty("enterprise")) {
        dependsOn downloadLibssl
        dependsOn expandLibssl
    }
    if (!file(authoringBundleRoot).exists()) {
        if (authoringBundleUrl) {
            dependsOn downloadAuthoringBundle
            dependsOn expandAuthoringBundle
        } else if (file(authoringBundleFile).file) {
            dependsOn expandAuthoringBundle
        } else {
            doLast {
                copy {
                    from "${authoringBundleFile}/"
                    into authoringBundleRoot
                }
            }
        }
    }
}

task prepareDeliveryBundle() {
    if (!file(deliveryBundleRoot).exists()) {
        if (deliveryBundleUrl) {
            dependsOn downloadDeliveryBundle
            dependsOn expandDeliveryBundle
        } else if (file(deliveryBundleFile).file) {
            dependsOn expandDeliveryBundle
        }  else {
            doLast {
                copy {
                    from "${deliveryBundleFile}/"
                    into deliveryBundleRoot
                }
            }
        }
    }
}

task copyAuthoringCustomWebapps() {
    dependsOn prepareAuthoringBundle

    if (project.hasProperty("authoringCustomWebapps")) {
        doLast {
            project.property('authoringCustomWebapps').split(',').each { war ->
                copy {
                    from war
                    into "${authoringBundleRoot}/bin/apache-tomcat/webapps"
                }
            }
        }
    }
}

task copyDeliveryCustomWebapps() {
    dependsOn prepareDeliveryBundle

    if (project.hasProperty("deliveryCustomWebapps")) {
        doLast {
            project.property('deliveryCustomWebapps').split(',').each { war ->
                copy {
                    from war
                    into "${deliveryBundleRoot}/bin/apache-tomcat/webapps"
                }
            }
        }
    }
}

task buildAuthoringTomcat(group: "Build", description: "Builds the Authoring Tomcat Docker image") {
    dependsOn prepareAuthoringBundle
    dependsOn copyAuthoringCustomWebapps

    def buildDir = "${imagesBuildDir}/authoring/tomcat"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/authoring/tomcat/"
            into buildDir
        }

        if (project.hasProperty("enterprise")) {
            copy {
                from "${tempDir}/libssl1.0.0/"
                into "${buildDir}/lib"
            }
        }

        copy {
            from "${authoringBundleRoot}/bin/"
            into "${buildDir}/bin"
            exclude defaultTomcatBinExcludes
        }

        exec {
            commandLine 'docker', 'build', '--target', authoringBuildTarget, '-t', "${project.authoringTomcatImageName}:${project.version}", buildDir
        }
    }
}

task buildAuthoringTomcatWithImageMagick(group: "Build", description: "Builds the Authoring Tomcat Docker image, including the ImageMagick binary") {
    dependsOn buildAuthoringTomcat

    def buildDir = "${imagesBuildDir}/authoring/tomcat"

    doLast {
        exec {
            commandLine 'docker', 'build', '--target', 'imagemagick', '-t', "${project.authoringTomcatWithImageMagickImageName}:${project.version}", buildDir
        }
    }
}

task buildAuthoringTomcatWithSolrSupport(group: "Build", description: "Builds the Authoring Tomcat With Solr Support Docker image") {
    dependsOn prepareAuthoringBundle
    dependsOn copyAuthoringCustomWebapps

    def buildDir = "${imagesBuildDir}/authoring/tomcat_with_solr_support"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/authoring/tomcat/"
            into buildDir
        }

        if (project.hasProperty("enterprise")) {
            copy {
                from "${tempDir}/libssl1.0.0/"
                into "${buildDir}/lib"
            }
        }

        copy {
            from "${authoringBundleRoot}/bin/"
            into "${buildDir}/bin"
            exclude tomcatWithCrafterSearchBinExcludes
        }

        exec {
            commandLine 'docker', 'build', '--target', authoringBuildTarget, '-t', "${project.authoringTomcatWithSolrSupportImageName}:${project.version}", buildDir
        }
    }
}

task buildDeliveryTomcat(group: "Build", description: "Builds the Delivery Tomcat Docker image") {
    dependsOn prepareDeliveryBundle
    dependsOn copyDeliveryCustomWebapps

    def buildDir = "${imagesBuildDir}/delivery/tomcat"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/delivery/tomcat/"
            into buildDir
        }

        copy {
            from "${deliveryBundleRoot}/bin/"
            into "${buildDir}/bin"
            exclude defaultTomcatBinExcludes
        }

        exec {
            commandLine 'docker', 'build', '-t', "${project.deliveryTomcatDockerImageName}:${project.version}", buildDir
        }
    }
}

task buildDeliveryTomcatWithSolrSupport(group: "Build", description: "Builds the Delivery Tomcat With Solr Support Docker image") {
    dependsOn prepareDeliveryBundle
    dependsOn copyDeliveryCustomWebapps

    def buildDir = "${imagesBuildDir}/delivery/tomcat_with_solr_support"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/delivery/tomcat/"
            into buildDir
        }

        copy {
            from "${deliveryBundleRoot}/bin/"
            into "${buildDir}/bin"
            exclude tomcatWithCrafterSearchBinExcludes
        }

        exec {
            commandLine 'docker', 'build', '-t', "${project.deliveryTomcatWithSolrSupportImageName}:${project.version}", buildDir
        }
    }
}

task buildDeployer(group: "Build", description: "Builds the Deployer Docker image") {
    dependsOn prepareDeliveryBundle

    def buildDir = "${imagesBuildDir}/deployer"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/deployer/"
            into buildDir
        }
        copy {
            from "${deliveryBundleRoot}/bin/"
            into "${buildDir}/bin"
            exclude "migration"
            exclude "upgrade"
            exclude "apache-tomcat"
            exclude "elasticsearch"
            exclude "solr"
            exclude "**/*.pid"
        }

        exec {
            commandLine 'docker', 'build', '-t', "${project.deployerImageName}:${project.version}", buildDir
        }
    }
}

task buildProfile(group: "Build", description: "Builds the Profile Docker image")  {
    dependsOn buildDeliveryTomcat

    def buildDir = "${imagesBuildDir}/profile"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesBuildDir}/delivery/tomcat/"
            from "${imagesDir}/profile/"
            into buildDir
        }

        copy {
            from "${deliveryBundleRoot}/bin/apache-tomcat/webapps/crafter-profile.war"
            from "${deliveryBundleRoot}/bin/apache-tomcat/webapps/crafter-profile-admin.war"
            into "${buildDir}/bin/apache-tomcat/webapps"
        }

        exec {
            commandLine 'docker', 'build', '-t', "${project.profileImageName}:${project.version}", buildDir
        }
    }
}

task buildGitSshServer(group: "Build", description: "Builds the Git SSH Server Docker image")  {
    def buildDir = "${imagesBuildDir}/git_ssh_server"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/git_ssh_server/"
            into buildDir
        }

        exec {
            commandLine 'docker', 'build', '-t', "${project.gitSshServerImageName }:${project.version}", buildDir
        }
    }
}

task buildGitHttpsServer(group: "Build", description: "Builds the Git HTTPS Server Docker image")  {
    def buildDir = "${imagesBuildDir}/git_https_server"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/git_https_server/"
            into buildDir
        }

        exec {
            commandLine 'docker', 'build', '-t', "${project.gitHttpsServerImageName}:${project.version}", buildDir
        }
    }
}

task buildLogrotate(group: "Build", description: "Builds the Logrotate Docker image")  {
    def buildDir = "${imagesBuildDir}/logrotate"

    doFirst {
        delete buildDir
    }
    doLast {
        copy {
            from "${imagesDir}/logrotate/"
            into buildDir
        }

        exec {
            commandLine 'docker', 'build', '-t', "${project.logrotateImageName}:${project.version}", buildDir
        }
    }
}

task buildMainImages(group: "Build", description: "Builds main Docker images") {
    dependsOn buildAuthoringTomcat
    dependsOn buildDeliveryTomcat
    dependsOn buildDeployer
    dependsOn buildGitSshServer
    dependsOn buildGitHttpsServer
    if (project.hasProperty("enterprise")) {
        if (project.hasProperty("imagemagick")) {
            dependsOn buildAuthoringTomcatWithImageMagick
        }
    }
}

task buildTomcatImagesWithSolrSupport(group: "Build", description: "Builds Tomcat Docker images with Solr support") {
    dependsOn buildAuthoringTomcatWithSolrSupport
    dependsOn buildDeliveryTomcatWithSolrSupport
}

task build(group: "Build", description: "Builds all Docker images") {
    dependsOn buildMainImages
    dependsOn buildTomcatImagesWithSolrSupport
    dependsOn buildProfile
    dependsOn buildLogrotate
}

task clean(group: "Build", description: "Deletes build folder") {
    doLast {
        delete buildDir
    }
}
